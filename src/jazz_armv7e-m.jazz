
param int KYBER_Q = 3329;
param int KYBER_N = 256;
param int KYBER_K = 3;

param int KYBER_VECN = KYBER_K * KYBER_N;

inline
fn __compress1x8(reg u32 a0 a1 a2 a3 a4 a5 a6 a7 b) -> reg u32 {

    // -1290167 <= ai <= 1290167
    a0 = #SMMULR(a0, b);
    a1 = #SMMULR(a1, b);
    a2 = #SMMULR(a2, b);
    a3 = #SMMULR(a3, b);
    a4 = #SMMULR(a4, b);
    a5 = #SMMULR(a5, b);
    a6 = #SMMULR(a6, b);
    a7 = #SMMULR(a7, b);

    a0 = #UBFX(a0, 0, 1);
    a1 = #UBFX(a1, 0, 1);
    a2 = #UBFX(a2, 0, 1);
    a3 = #UBFX(a3, 0, 1);
    a4 = #UBFX(a4, 0, 1);
    a5 = #UBFX(a5, 0, 1);
    a6 = #UBFX(a6, 0, 1);
    a7 = #UBFX(a7, 0, 1);
    // We have round(ai * 2^10 / 3329) mod^+ 2^10 now.

    // We pack the lowest 1-bits into a byte.
    a0 |= a1 << 1;
    a0 |= a2 << 2;
    a0 |= a3 << 3;
    a0 |= a4 << 4;
    a0 |= a5 << 5;
    a0 |= a6 << 6;
    a0 |= a7 << 7;

    return a0;

}

inline
fn __poly_compress1(reg u32 des, stack u16[KYBER_N] src){

    reg u32[8] a;
    reg u32 b;

    inline int i j;

    // 2580335 = round(2^33 / 3329)
    b = #MOV(2580335 % 65536);
    b = #MOVT(b, 2580335 / 65536);

    for i = 0 to KYBER_N / 8 {

        for j = 0 to 8 {
            a[j] = (32s)src[8 * i + j];
        }

        a[0] = __compress1x8(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], b);

        (u8)[des] = (8u)a[0];
        des += 1;

    }

}

inline
fn __i_poly_compress1(reg ptr u8[32] des, stack u16[KYBER_N] src) -> reg ptr u8[32] {

    reg u32[8] a;
    reg u32 b;

    inline int i j;

    // 2580335 = round(2^33 / 3329)
    b = #MOV(2580335 % 65536);
    b = #MOVT(b, 2580335 / 65536);

    for i = 0 to KYBER_N / 8 {

        for j = 0 to 8 {
            a[j] = (32s)src[8 * i + j];
        }

        a[0] = __compress1x8(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], b);

        des[i] = (8u)a[0];

    }

    return des;

}

export
fn __jazz_poly_compress1(reg u32 des, reg u32 src){

    reg u32 t;
    stack u16[KYBER_N] buff;

    inline int i;

    for i = 0 to KYBER_N {
        t = (32u)(u16)[src + i * 2];
        buff[i] = (16u)t;
    }

    __poly_compress1(des, buff);

}

export
fn __jazz_stack_poly_compress1(reg u32 des, reg u32 src){

    reg u32 t;
    reg ptr u8[32] des_buff_ptr;
    stack u16[KYBER_N] buff;
    stack u8[32] des_buff;

    inline int i;

    for i = 0 to KYBER_N {
        t = (32u)(u16)[src + i * 2];
        buff[i] = (16u)t;
    }

    des_buff_ptr = des_buff;
    des_buff_ptr = __i_poly_compress1(des_buff_ptr, buff);
    des_buff = des_buff_ptr;

    for i = 0 to 32 {
        t = (32u)des_buff[i];
        (u8)[des + i] = t;
    }

}

inline
fn __compress4x4(reg u32 a0 a1 a2 a3 b) -> reg u32 {

    // -1290167 <= ai <= 1290167
    a0 = #SMMULR(a0, b);
    a1 = #SMMULR(a1, b);
    a2 = #SMMULR(a2, b);
    a3 = #SMMULR(a3, b);

    a0 = #UBFX(a0, 0, 4);
    a1 = #UBFX(a1, 0, 4);
    a2 = #UBFX(a2, 0, 4);
    a3 = #UBFX(a3, 0, 4);
    // We have round(ai * 2^10 / 3329) mod^+ 2^10 now.

    // We pack the lowest 4-bits into a halfword.
    a0 |= a1 << 4;
    a0 |= a2 << 8;
    a0 |= a3 << 12;

    return a0;

}

inline
fn __poly_compress4(reg u32 des, stack u16[KYBER_N] src){

    reg u32[4] a;
    reg u32 b;

    inline int i j;

    b = #MOV(20642679 % 65536);
    b = #MOVT(b, 20642679 / 65536);

    for i = 0 to KYBER_N / 4 {

        for j = 0 to 4 {
            a[j] = (32s)src[4 * i + j];
        }

        a[0] = __compress4x4(a[0], a[1], a[2], a[3], b);

        (u16)[des] = (16u)a[0];
        des += 2;

    }

}

inline
fn __i_poly_compress4(reg ptr u8[128] des, stack u16[KYBER_N] src) -> reg ptr u8[128] {

    reg u32[4] a;
    reg u32 b;

    inline int i j;

    b = #MOV(20642679 % 65536);
    b = #MOVT(b, 20642679 / 65536);

    for i = 0 to KYBER_N / 4 {

        for j = 0 to 4 {
            a[j] = (32s)src[4 * i + j];
        }

        a[0] = __compress4x4(a[0], a[1], a[2], a[3], b);

        des.[u16 2 * i] = (16u)a[0];

    }

    return des;

}

export
fn __jazz_poly_compress4(reg u32 des, reg u32 src){

    reg u32 t;
    stack u16[KYBER_N] buff;

    inline int i;

    for i = 0 to KYBER_N {
        t = (32u)(u16)[src + i * 2];
        buff[i] = (16u)t;
    }

    __poly_compress4(des, buff);

}

export
fn __jazz_stack_poly_compress4(reg u32 des, reg u32 src){

    reg u32 t;
    reg ptr u8[128] des_buff_ptr;
    stack u16[KYBER_N] buff;
    stack u8[128] des_buff;

    inline int i;

    for i = 0 to KYBER_N {
        t = (32u)(u16)[src + i * 2];
        buff[i] = (16u)t;
    }

    des_buff_ptr = des_buff;
    des_buff_ptr = __i_poly_compress4(des_buff_ptr, buff);
    des_buff = des_buff_ptr;

    for i = 0 to 32 {
        t = (32u)des_buff[i];
        (u8)[des + i] = t;
    }

}

inline
fn __compress10x4(reg u32 a0 a1 a2 a3 b) -> reg u32, reg u32 {

    // -1290167 <= ai <= 1290167
    a0 = #SMMULR(a0, b);
    a1 = #SMMULR(a1, b);
    a2 = #SMMULR(a2, b);
    a3 = #SMMULR(a3, b);

    a0 = #UBFX(a0, 0, 10);
    a1 = #UBFX(a1, 0, 10);
    a2 = #UBFX(a2, 0, 10);
    a3 = #UBFX(a3, 0, 10);
    // We have round(ai * 2^10 / 3329) mod^+ 2^10 now.

    // We pack the lowest 10-bits into a word and a byte.
    a0 |= a1 << 10;
    a0 |= a2 << 20;
    a0 |= a3 << 30;
    a3 >>= 2;

    // The first register contains the lowest 32 bits of the packed value,
    // and the second register contains the next 8 bits.
    return a0, a3;

}

inline
fn __poly_compress10(reg u32 des, stack u16[KYBER_N] src){

    reg u32[4] a;
    reg u32 b;

    inline int i j;

    b = #MOV(1321131424 % 65536);
    b = #MOVT(b, 1321131424 / 65536);

    for i = 0 to KYBER_N / 4 {

        for j = 0 to 4 {
            a[j] = (32s)src[4 * i + j];
        }

        a[0], a[3] = __compress10x4(a[0], a[1], a[2], a[3], b);

        [des] = a[0];
        (u8)[des + 4] = (8u)a[3];
        des += 5;

    }

}

inline
fn __i_poly_compress10(reg ptr u8[320] des, stack u16[KYBER_N] src) -> reg ptr u8[320] {

    reg u32[4] a;
    reg u32 b;

    inline int i j;

    b = #MOV(1321131424 % 65536);
    b = #MOVT(b, 1321131424 / 65536);

    for i = 0 to KYBER_N / 4 {

        for j = 0 to 4 {
            a[j] = (32s)src[4 * i + j];
        }

        a[0], a[3] = __compress10x4(a[0], a[1], a[2], a[3], b);

        des.[u32 5 * i] = a[0];
        des.[u8 5 * i + 4] = (8u)a[3];

    }

    return des;

}

export
fn __jazz_poly_compress10(reg u32 des, reg u32 src){

    reg u32 t;
    stack u16[KYBER_N] buff;

    inline int i;

    for i = 0 to KYBER_N {
        t = (32u)(u16)[src + i * 2];
        buff[i] = (16u)t;
    }

    __poly_compress10(des, buff);

}

export
fn __jazz_stack_poly_compress10(reg u32 des, reg u32 src){

    reg u32 t;
    reg ptr u8[320] des_buff_ptr;
    stack u16[KYBER_N] buff;
    stack u8[320] des_buff;

    inline int i;

    for i = 0 to KYBER_N {
        t = (32u)(u16)[src + i * 2];
        buff[i] = (16u)t;
    }

    des_buff_ptr = des_buff;
    des_buff_ptr = __i_poly_compress10(des_buff_ptr, buff);
    des_buff = des_buff_ptr;

    for i = 0 to 320 {
        t = (32u)des_buff[i];
        (u8)[des + i] = t;
    }

}

inline
fn __polyvec_compress10(reg u32 des, stack u16[KYBER_VECN] src){

    reg u32[4] a;
    reg u32 b;

    inline int i j;

    b = #MOV(1321131424 % 65536);
    b = #MOVT(b, 1321131424 / 65536);

    for i = 0 to KYBER_VECN / 4 {

        for j = 0 to 4 {
            a[j] = (32s)src[4 * i + j];
        }

        a[0], a[3] = __compress10x4(a[0], a[1], a[2], a[3], b);

        [des] = a[0];
        (u8)[des + 4] = (8u)a[3];
        des += 5;

    }

}

inline
fn __i_polyvec_compress10(reg ptr u8[320] des, stack u16[KYBER_VECN] src) -> reg ptr u8[320] {

    reg u32[4] a;
    reg u32 b;

    inline int i j;

    b = #MOV(1321131424 % 65536);
    b = #MOVT(b, 1321131424 / 65536);

    for i = 0 to KYBER_VECN / 4 {

        for j = 0 to 4 {
            a[j] = (32s)src[4 * i + j];
        }

        a[0], a[3] = __compress10x4(a[0], a[1], a[2], a[3], b);

        des.[u32 5 * i] = a[0];
        des.[u8 5 * i + 4] = (8u)a[3];

    }

    return des;

}

export
fn __jazz_polyvec_compress10(reg u32 des, reg u32 src){

    reg u32 t;
    stack u16[KYBER_VECN] buff;

    inline int i;

    for i = 0 to KYBER_VECN {
        t = (32u)(u16)[src + i * 2];
        buff[i] = (16u)t;
    }

    __polyvec_compress10(des, buff);

}

export
fn __jazz_stack_polyvec_compress10(reg u32 des, reg u32 src){

    reg u32 t;
    reg ptr u8[960] des_buff_ptr;
    stack u16[KYBER_VECN] buff;
    stack u8[960] des_buff;

    inline int i;

    for i = 0 to KYBER_VECN {
        t = (32u)(u16)[src + i * 2];
        buff[i] = (16u)t;
    }

    des_buff_ptr = des_buff;
    des_buff_ptr = __i_polyvec_compress10(des_buff_ptr, buff);
    des_buff = des_buff_ptr;

    for i = 0 to 960 {
        t = (32u)des_buff[i];
        (u8)[des + i] = t;
    }

}

